{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wo",
				"worldMatrix"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\n'''\nAuthor @Doug Schieber\nEmail DougSchieberAnimation@gmail.com\n\n---------- TO USE ----------\nselect a polygonal edge\nUI will create facial controls based off edge.\nincludes options for facial controls construction including attaching joints to a nurbs surface or using a center locator for rotation restraints. \n\nimport nmFaceControls as fc\nfc.facialControlUI()\n\n\n----------------------------\n\n----Functions----\n\ncurveFromVertPositions\nfirst\nsecond\nthird\ngetUParam\ngetDagPath\nfaceCtrlCreate\ngroupSpecial\nattachToNurbsSurface\nloadInTextField\ncreateNurbsAttachSurface\ncreateLocatorsUpCenter\nclearTextField\nfacialControlUI\nobjectPrefix\nrunControlCreator\n\n----Additions/Bugs----\n-surface slide joints are in a random order. This is due to the vertex order, should change to go off of curve.cv (fixed)\n-runControlCreator method should be broken into smaller parts (added dividers to determine where to make functions)\n-rename methods\n-different UI setup\n-bindjoints need aimconstraints to maintain rotation. (IMPORTANT) This can be seen when parented to hierarchical controls. (WIP) \n\tNote: bind joints should be constrained and not directly parented. \n-sliderjoints should be the only bind joints in the attach to nurbs surface. \n-use local space so that script can attach to parent joint (a parent constraint with maintain offset made in nodes) \n-nurbs surface hit detection option to allow pulling off the surface\n\n'''\n\n\nfrom maya import cmds, OpenMaya\nimport maya.mel as mel\n\n\n'''\ncreates a curve from edge selection\n\n'''\ndef curveFromVertPositions(edges):\t\n\t\n\tgetEdges= edges\n\tcmds.select(getEdges)\n\tmel.eval('polyToCurve -form 2 -degree 1;')\n\tcurveObj=cmds.ls(sl=True)\n\treturn curveObj \n\t\n'''\ncreates joints based on vertices positions or curve.cvs\n\n\n'''\n\t\n\ndef first(center = '', fromCenter = False, step = 1):\n\t\n\tvtx = cmds.ls(sl = 1, fl = 1)\n\t#is selection curve?\n\tjnt = []\n\tn=0\n\tnewVtxList = []\n\t#loop rebuilds vtx list, encase of high topo\n\tfor i in range(0, len(vtx), step):\n\t\tnewVtxList.append(vtx[i])\n\t\n\t#get vtx pos, set jnt to pos\n\tfor v in newVtxList:\n\t\tcmds.select(cl =1) \n\t\tjnt.append( cmds.joint())\n\t\tpos = cmds.xform(v , q =1, ws =1, t =1)\n\t\tcmds.xform(jnt[n], ws =1, t =pos)\n\t\tif fromCenter:\n\t\t\tposC = cmds.xform(center, q =1, ws =1, t =1)\n\t\t\tcmds.select(cl =1)\n\t\t\tjntC = cmds.joint()\n\t\t\tcmds.xform(jntC, ws =1, t =posC)\n\t\t\tcmds.parent(jnt[n], jntC)\n\t\t\tcmds.joint (jntC, e =1, oj = \"xyz\", secondaryAxisOrient= \"yup\", ch =1, zso =1)\n\t\tn = n + 1\n\treturn jnt\n\t        \n'''\ncreates locators using an objects position in worldspace\n\n'''\ndef second(upVector = '', fromCenter = False, objects = []):\n\t\n\tsel = objects\n\tallLocs = []\n\tfor s in sel :\n\t\tloc = cmds.spaceLocator()[0]\n\t\tpos = cmds.xform(s, q =1, ws =1, t =1)\n\t\tcmds.xform(loc, ws =1, t =pos)\n\t\t#aimconstraint\n\t\tif fromCenter:\n\t\t\tpar =cmds.listRelatives(s, p =1 ) [0]\n\t\t\tcmds.aimConstraint(loc, par, mo=1, weight=1, aimVector=(1,0,0), upVector=(0,1,0), worldUpType = \"object\", worldUpObject = upVector)\n\t\tallLocs.append(loc)\n\treturn allLocs\n\n'''\nget the locator position on curve then attach locator or object to curve\n\n'''\n\n\ndef third(crv = '', positionObjects = []):\n    sel = positionObjects\n    for s in sel :\n\t\tpos = cmds.xform (s ,q = 1 , ws = 1 , t = 1) \n\t\t#unnecessary and does not work. \n\t\t#cross Product nodes\n\t\t'''\n\t\tax_Z = cmds.createNode( 'vectorProduct', n = str(s) + '_vectorProduct_ax_Z' )\n\t\tax_X = cmds.createNode( 'vectorProduct', n = str(s) + '_vectorProduct_ax_X' )\n\t\t#end product nodes\n\t\tfourByFourMatrix = cmds.createNode( 'fourByFourMatrix', n = str(s) + '_fourByFourMatrix' )\n\t\tdecompose4x4Matrix = cmds.createNode( 'decomposeMatrix', n = str(s) + '_decompose4x4Matrix' )\n\t\t'''\n\t\tu = getUParam(pos, crv)\n\t\t#name = s.replace(\"_LOC\" , \"_PCI\")\n\t\tpci = cmds.createNode(\"pointOnCurveInfo\" , n = str(s) + '_pci')\n\t\tcmds.connectAttr(crv + '.worldSpace' , pci + '.inputCurve')\n\t\tcmds.setAttr(pci + '.parameter' , u )\n\t\tcmds.connectAttr( pci + '.position' , s + '.t')\n\t\t'''\n\t\t#unnecessary and does not work. \n\t\t#set vectorProduct to cross product operation\n\t\tcmds.setAttr(ax_Z+\".operation\", 2)\n\t\tcmds.setAttr(ax_X+\".operation\", 2)\n\t\t#finding the cross product for XYZ\n\t\tcmds.connectAttr(pci+ \".normalizedTangent\", ax_X + \".input1\", f= True)\n\t\tcmds.connectAttr(pci+ \".normalizedNormal\", ax_X + \".input2\", f= True)\n\t\tcmds.connectAttr(pci+ \".normalizedNormal\", ax_Z + \".input1\", f= True)\n\t\tcmds.connectAttr(ax_X + \".output\", ax_Z + \".input2\", f = True)\n\t\t#euler X\n\t\tcmds.connectAttr(ax_X + \".outputX\",fourByFourMatrix+\".in00\",f = True)\n\t\tcmds.connectAttr(ax_X + \".outputY\",fourByFourMatrix+\".in01\",f = True)\n\t\tcmds.connectAttr(ax_X + \".outputZ\",fourByFourMatrix+\".in02\",f = True)\n\t\t#euler Z\n\t\tcmds.connectAttr(ax_Z + \".outputX\",fourByFourMatrix+\".in20\",f = True)\n\t\tcmds.connectAttr(ax_Z + \".outputY\",fourByFourMatrix+\".in21\",f = True)\n\t\tcmds.connectAttr(ax_Z + \".outputZ\",fourByFourMatrix+\".in22\",f = True)\n\t\t#euler Y\n\t\tcmds.connectAttr(pci+ \".normalizedNormalX\",fourByFourMatrix+\".in10\",f = True)\n\t\tcmds.connectAttr(pci+ \".normalizedNormalY\",fourByFourMatrix+\".in11\",f = True)\n\t\tcmds.connectAttr(pci+ \".normalizedNormalZ\",fourByFourMatrix+\".in12\",f = True)\n\t\t#position\n\t\tcmds.connectAttr(pci + \".positionX\",fourByFourMatrix+\".in30\",f = True)\n\t\tcmds.connectAttr(pci + \".positionY\",fourByFourMatrix+\".in31\",f = True)\n\t\tcmds.connectAttr(pci + \".positionZ\",fourByFourMatrix+\".in32\",f = True)\n\t\t\n\t\t#at last, output into decomposeMatrix\n\t\tcmds.connectAttr(fourByFourMatrix+\".output\",decompose4x4Matrix+\".inputMatrix\",f = True)\n\t\tcmds.connectAttr(decompose4x4Matrix+\".outputTranslate\",s +\".t\",f = True)\n\t\tcmds.connectAttr(decompose4x4Matrix+\".outputRotate\",s + \".rotate\",f = True)\n\t\t'''\n\ndef getUParam( pnt = [], crv = None):\n\t\n    point = OpenMaya.MPoint(pnt[0],pnt[1],pnt[2])\n    #curveFn = OpenMaya.MFnNurbsCurve(getDagPath(crv))\n    curveFn = OpenMaya.MFnNurbsCurve(getDagPath(crv))\n    paramUtill=OpenMaya.MScriptUtil()\n    paramPtr=paramUtill.asDoublePtr()\n    isOnCurve = curveFn.isPointOnCurve(point)\n    if isOnCurve == True:\n        curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n    else :\n        point = curveFn.closestPoint(point,paramPtr,0.001,OpenMaya.MSpace.kObject)\n        curveFn.getParamAtPoint(point , paramPtr,0.001,OpenMaya.MSpace.kObject )\n    \n    param = paramUtill.getDouble(paramPtr)  \n    return param\n    \ndef getDagPath( objectName):\n    \n    if isinstance(objectName, list)==True:\n        oNodeList=[]\n        for o in objectName:\n            selectionList = OpenMaya.MSelectionList()\n            selectionList.add(o)\n            oNode = OpenMaya.MDagPath()\n            selectionList.getDagPath(0, oNode)\n            oNodeList.append(oNode)\n        return oNodeList\n    else:\n        selectionList = OpenMaya.MSelectionList()\n        selectionList.add(objectName)\n        oNode = OpenMaya.MDagPath()\n        selectionList.getDagPath(0, oNode)\n        return oNode\n\n\n'''\ncreates controls from object position\n\n\n'''\n\ndef faceCtrlCreate(prefix = '', objects = [], controlSize = 1.0):\n\tctrls = []\n\tfor stuff in objects:\n\t\t# control\n\t\tctrl = mel.eval('curve -d 1 -p 0 1 0 -p 0 0.987688 -0.156435 -p 0 0.951057 -0.309017 -p 0 0.891007 -0.453991 -p 0 0.809017 -0.587786 -p 0 0.707107 -0.707107 -p 0 0.587785 -0.809017 -p 0 0.453991 -0.891007 -p 0 0.309017 -0.951057 -p 0 0.156434 -0.987689 -p 0 0 -1 -p 0 -0.156434 -0.987689 -p 0 -0.309017 -0.951057 -p 0 -0.453991 -0.891007 -p 0 -0.587785 -0.809017 -p 0 -0.707107 -0.707107 -p 0 -0.809017 -0.587786 -p 0 -0.891007 -0.453991 -p 0 -0.951057 -0.309017 -p 0 -0.987688 -0.156435 -p 0 -1 0 -p -4.66211e-09 -0.987688 0.156434 -p -9.20942e-09 -0.951057 0.309017 -p -1.353e-08 -0.891007 0.453991 -p -1.75174e-08 -0.809017 0.587785 -p -2.10734e-08 -0.707107 0.707107 -p -2.41106e-08 -0.587785 0.809017 -p -2.65541e-08 -0.453991 0.891007 -p -2.83437e-08 -0.309017 0.951057 -p -2.94354e-08 -0.156434 0.987688 -p -2.98023e-08 0 1 -p -2.94354e-08 0.156434 0.987688 -p -2.83437e-08 0.309017 0.951057 -p -2.65541e-08 0.453991 0.891007 -p -2.41106e-08 0.587785 0.809017 -p -2.10734e-08 0.707107 0.707107 -p -1.75174e-08 0.809017 0.587785 -p -1.353e-08 0.891007 0.453991 -p -9.20942e-09 0.951057 0.309017 -p -4.66211e-09 0.987688 0.156434 -p 0 1 0 -p -0.156435 0.987688 0 -p -0.309017 0.951057 0 -p -0.453991 0.891007 0 -p -0.587785 0.809017 0 -p -0.707107 0.707107 0 -p -0.809017 0.587785 0 -p -0.891007 0.453991 0 -p -0.951057 0.309017 0 -p -0.987689 0.156434 0 -p -1 0 0 -p -0.987689 -0.156434 0 -p -0.951057 -0.309017 0 -p -0.891007 -0.453991 0 -p -0.809017 -0.587785 0 -p -0.707107 -0.707107 0 -p -0.587785 -0.809017 0 -p -0.453991 -0.891007 0 -p -0.309017 -0.951057 0 -p -0.156435 -0.987688 0 -p 0 -1 0 -p 0.156434 -0.987688 0 -p 0.309017 -0.951057 0 -p 0.453991 -0.891007 0 -p 0.587785 -0.809017 0 -p 0.707107 -0.707107 0 -p 0.809017 -0.587785 0 -p 0.891006 -0.453991 0 -p 0.951057 -0.309017 0 -p 0.987688 -0.156434 0 -p 1 0 0 -p 0.951057 0 -0.309017 -p 0.809018 0 -0.587786 -p 0.587786 0 -0.809017 -p 0.309017 0 -0.951057 -p 0 0 -1 -p -0.309017 0 -0.951057 -p -0.587785 0 -0.809017 -p -0.809017 0 -0.587785 -p -0.951057 0 -0.309017 -p -1 0 0 -p -0.951057 0 0.309017 -p -0.809017 0 0.587785 -p -0.587785 0 0.809017 -p -0.309017 0 0.951057 -p -2.98023e-08 0 1 -p 0.309017 0 0.951057 -p 0.587785 0 0.809017 -p 0.809017 0 0.587785 -p 0.951057 0 0.309017 -p 1 0 0 -p 0.987688 0.156434 0 -p 0.951057 0.309017 0 -p 0.891006 0.453991 0 -p 0.809017 0.587785 0 -p 0.707107 0.707107 0 -p 0.587785 0.809017 0 -p 0.453991 0.891007 0 -p 0.309017 0.951057 0 -p 0.156434 0.987688 0 -p 0 1 0 ;')\n\t\tcmds.parentConstraint(stuff,ctrl,mo=False)\n\t\tcmds.scale(controlSize, controlSize, controlSize, ctrl, scaleXYZ = True)\n\t\tcmds.delete(ctrl,cn=True)\n\t\tnewName = cmds.rename(prefix+'_ctrl_#')\n\t\tctrls.append(newName)\n\treturn ctrls\n\n\n'''\nfor grouping controllers so they have offset\n\n'''\n\n\ndef groupSpecial(objectSelection = []):\n\t# group list\n\tgroups = []\n\t# group selected\n\tif (len(objectSelection) > 0):\n\t\tfor stuff in objectSelection:\n\t\t\tpar = cmds.listRelatives(stuff,p=True)\n\t\t\t#creates a second null group, currently not functioning\n\t\t\tif '_null_' in stuff:\n\t\t\t\t# split obj\n\t\t\t\tsplit = stuff.split('_null_')\n\t\t\t\tobjName = split[0]\n\t\t\t\tnum = split[-1]\n\t\t\t\tnew = int(num) + 1\n\t\t\t\tif not(cmds.objExists(objName+'_null_'+str(new))):\n\t\t\t\t\t# create group\n\t\t\t\t\tcmds.group(n=objName+'_null_'+str(new),em=True)\n\t\t\t\t\tcmds.parentConstraint(stuff,objName+'_null_'+str(new),mo=False,n='tEmPbLaHbLaH')\n\t\t\t\t\tcmds.delete('tEmPbLaHbLaH')\n\t\t\t\t\tcmds.parent(stuff,objName+'_null_'+str(new)) \n\t\t\t\t\tgroups.append(objName+'_null_'+str(new))\n\t\t\t\t\tif (par):\n\t\t\t\t\t\tcmds.parent(objName+'_null_'+str(new),par[0])\n\t\t\t\t\t\n\t\t\t#creates null group\n\t\t\telse:\n\t\t\t\tif (cmds.objExists(stuff+'_null_0')==0):\n\t\t\t\t\tcmds.group(n=stuff+'_null_0',em=True)\n\t\t\t\t\tcmds.parentConstraint(stuff,stuff+'_null_0',mo=False,n='tEmPbLaHbLaH')\n\t\t\t\t\tcmds.delete('tEmPbLaHbLaH')\n\t\t\t\t\tcmds.parent(stuff,stuff+'_null_0')\n\t\t\t\t\tgroups.append(stuff+'_null_0')\n\t\t\t\t\tif (par):\n\t\t\t\t\t\tcmds.parent(stuff+'_null_0',par[0])\t\n\treturn groups\n\n'''\nattaches joints to a nurbs surface using a surface vector for position. \n\n\n'''\ndef attachToNurbsSurface(prefix = '', nurbSurface = '', surfaceVec = []):\n\t#nurbs surface to slide on\n\tnurbsSurface = cmds.listRelatives(nurbSurface, c=True)\n\t#point where joints will be attach to surface\n\tsurfacePoint = []\n\tnum = 0\n\tjnt = []\n\t\n\tfor i in range(len(surfaceVec)):\n\t\tjnt.append(cmds.joint())\n\t\tcmds.parent(jnt[i], w = True)\n\t\tpos = cmds.xform(surfaceVec[i], q =1, ws =1, t =1)\n\t\tcmds.xform(jnt[i], ws =1, t =pos)\n\t\tjntRN = cmds.rename(jnt[i], prefix + \"_surfaceSlide_bn_JNT_\" + str(num))\n\t\tsurfacePoint.append(jntRN)\n\t\tnum = num + 1\n\t\n\t# ----------------------------------------------------------------------------------\n\tnum = 0 # why is num here? \n\tfor i in range(len(surfaceVec)):\n\t\t#information Nodes\n\t\tdecomposeMatrix = cmds.createNode('decomposeMatrix', n = surfaceVec[i] + '_decomposeMatrix')\n\t\tclosestPointOnSurface = cmds.createNode('closestPointOnSurface', n = surfaceVec[i] + '_closestPointOnSurface')\n\t\tpointOnSurfaceInfo = cmds.createNode( 'pointOnSurfaceInfo', n = surfaceVec[i] + '_pointOnSurfaceInfo' )\n\t\t#cross Product nodes\n\t\tax_Z = cmds.createNode( 'vectorProduct', n = surfaceVec[i] + 'vectorProduct_ax_Z' )\n\t\tax_X = cmds.createNode( 'vectorProduct', n = surfaceVec[i] + 'vectorProduct_ax_X' )\n\t\t#end product nodes\n\t\tfourByFourMatrix = cmds.createNode( 'fourByFourMatrix', n = surfaceVec[i] + '_fourByFourMatrix' )\n\t\tdecompose4x4Matrix = cmds.createNode( 'decomposeMatrix', n = surfaceVec[i] + '_decompose4x4Matrix' )\n\t\t#set vectorProduct to cross product operation\n\t\tcmds.setAttr(ax_Z+\".operation\", 2)\n\t\tcmds.setAttr(ax_X+\".operation\", 2)\n\t\tcmds.setAttr(ax_Z + \".input1X\", 1)\n\t\t#decompose matrix for surface vector\n\t\tcmds.connectAttr(surfaceVec[i]+\".worldMatrix[0]\", decomposeMatrix+\".inputMatrix\", f=True)\n\t\t#closest point on surface connections\n\t\tcmds.connectAttr(nurbsSurface[0]+\".worldSpace[0]\", closestPointOnSurface+\".inputSurface\",f=True)\n\t\tcmds.connectAttr(decomposeMatrix+\".outputTranslate\", closestPointOnSurface+\".inPosition\",f=True)\n\t\t#point on Surface connections\n\t\tcmds.connectAttr(nurbsSurface[0]+\".worldSpace[0]\", pointOnSurfaceInfo+\".inputSurface\", f=True)\n\t\tcmds.connectAttr(closestPointOnSurface+\".result.parameterV\", pointOnSurfaceInfo+\".parameterV\", f = True)\n\t\tcmds.connectAttr(closestPointOnSurface+\".result.parameterU\", pointOnSurfaceInfo+\".parameterU\", f = True)\n\t\t#finding the cross product for XYZ\n\t\tcmds.connectAttr(pointOnSurfaceInfo+ \".result.normal\", ax_Z + \".input2\", f= True)\n\t\tcmds.connectAttr(pointOnSurfaceInfo+ \".result.normal\", ax_X + \".input1\", f= True)\n\t\tcmds.connectAttr(ax_Z + \".output\", ax_X + \".input2\", f = True)\n\t\t#fourByFourConnections\n\t\tcmds.connectAttr(ax_X + \".outputX\",fourByFourMatrix+\".in00\",f = True)\n\t\tcmds.connectAttr(ax_X + \".outputY\",fourByFourMatrix+\".in01\",f = True)\n\t\tcmds.connectAttr(ax_X + \".outputZ\",fourByFourMatrix+\".in02\",f = True)\n\t\t\n\t\tcmds.connectAttr(ax_Z + \".outputX\",fourByFourMatrix+\".in20\",f = True)\n\t\tcmds.connectAttr(ax_Z + \".outputY\",fourByFourMatrix+\".in21\",f = True)\n\t\tcmds.connectAttr(ax_Z + \".outputZ\",fourByFourMatrix+\".in22\",f = True)\n\t\t#.result.normal.normalZ\n\t\tcmds.connectAttr(pointOnSurfaceInfo+ \".result.normal.normalX\",fourByFourMatrix+\".in10\",f = True)\n\t\tcmds.connectAttr(pointOnSurfaceInfo+ \".result.normal.normalY\",fourByFourMatrix+\".in11\",f = True)\n\t\tcmds.connectAttr(pointOnSurfaceInfo+ \".result.normal.normalZ\",fourByFourMatrix+\".in12\",f = True)\n\t\t#position\n\t\tcmds.connectAttr(pointOnSurfaceInfo + \".result.position.positionX\",fourByFourMatrix+\".in30\",f = True)\n\t\tcmds.connectAttr(pointOnSurfaceInfo + \".result.position.positionY\",fourByFourMatrix+\".in31\",f = True)\n\t\tcmds.connectAttr(pointOnSurfaceInfo + \".result.position.positionZ\",fourByFourMatrix+\".in32\",f = True)\n\t\t\n\t\t#at last, output into decompoeMatrix\n\t\tcmds.connectAttr(fourByFourMatrix+\".output\",decompose4x4Matrix+\".inputMatrix\",f = True)\n\t\tcmds.connectAttr(decompose4x4Matrix+\".outputRotate\",surfacePoint[i]+\".rotate\",f = True)\n\t\tcmds.connectAttr(decompose4x4Matrix+\".outputTranslate\",surfacePoint[i]+\".translate\",f = True)\n\t\n\treturn surfacePoint\n\n'''\n\nthis function loads in the nurbs surface in to the GUI\n\n\n'''\ndef loadInTextField(centerLocator):\n\t# Sel\n\tsel = cmds.ls(sl=True)\n\t# check\n\tif (len(sel)==1):\n\t\tif (cmds.listRelatives(sel[0],s=True)):\n\t\t\tshapes = cmds.listRelatives(sel[0],s=True)\n\t\t\ttypes = []\n\t\t\tfor stuff in shapes:\n\t\t\t\ttype = cmds.objectType(stuff)\n\t\t\t\ttypes.append(type)\n\t\t\tif 'nurbsSurface' in types:\n\t\t\t\tcmds.textFieldGrp('nurbsSurfaceTextField',e=True,tx=sel[0])\n\t\t\t\tprint('complete','Slide Nurbs Surface loaded.')\n\t\t\telif 'locator' in types and centerLocator==True:\n\t\t\t\tcmds.textFieldGrp('centerLocTextField',e=True,tx=sel[0])\n\t\t\t\tprint('complete','Center Locator loaded.')\n\t\t\telif 'locator' in types and centerLocator==False:\n\t\t\t\tcmds.textFieldGrp('upVecLocTextField',e=True,tx=sel[0])\n\t\t\t\tprint('complete','Up Vector Locator loaded.')\n\t\t\telse:\n\t\t\t\tprint('error','Selection Error, need a Nurbs Surface or Locator to load in.')\n\n'''\ncreates a plain nurbs surface. Optionally you can use your own nurbs surface\n\n'''\n\ndef createNurbsAttachSurface(*args):\n\tprefix = cmds.textFieldGrp(\"prefixTextField\", query = True, text = True)\n\tuPatches = cmds.intSliderGrp ( \"uvFieldNameU\", query = True, value = True)\n\tvPatches = cmds.intSliderGrp ( \"uvFieldNameV\", query = True, value = True)\n\tnurbsObject = cmds.nurbsPlane( p=[0, 0, 0], ax=[0, 1, 0], w=1, lr=1, d=3, u=uPatches, v=vPatches, ch=1, n=prefix+'_attachSurface#')\n\tcmds.textFieldGrp('nurbsSurfaceTextField',e=True,tx=nurbsObject[0])\n\tprint('complete','Slide Nurbs Surface loaded.')\n\n'''\ncreates an up vector locator and a center locator\n\n\n'''\n\ndef createLocatorsUpCenter(*args):\n\tprefix = cmds.textFieldGrp(\"prefixTextField\", query = True, text = True)\n\tcenterLocator = cmds.spaceLocator( n=prefix+'_center_loc#' )\n\tupVecLocator = cmds.spaceLocator( n=prefix+'_upVec_loc#' )\n\t\n\tcmds.textFieldGrp('centerLocTextField',e=True,tx=centerLocator[0])\n\tcmds.textFieldGrp('upVecLocTextField',e=True,tx=upVecLocator[0])\n\tprint('complete','Locators Loaded.')\n\n'''\nclears text fields in GUI\n\n\n'''\ndef clearTextField(*args):\n\tcmds.textFieldGrp('nurbsSurfaceTextField',e=True,tx='')\n\tcmds.textFieldGrp('centerLocTextField',e=True,tx='')\n\tcmds.textFieldGrp('upVecLocTextField',e=True,tx='')\n\n'''\nchecks for duplicate names\n\n'''\n\ndef objectPrefix():\n\tprefix = cmds.textFieldGrp(\"prefixTextField\", query = True, text = True)\n\tnum = 0\n\tcrvNumberPrecheck = []\n\ttry:\n\t\tcmds.select(prefix + \"_*\" + \"_nonDeform_grp\")\n\t\tcrvNumberPrecheck = cmds.ls( sl=True)\n\t\tprint(crvNumberPrecheck)\n\t\t\n\texcept ValueError:\n\t\t#so no error is thrown\n\t\tpass\n\t\t\n\tif (len(crvNumberPrecheck)< 0):\n\t\tprefix = prefix + '_0'\n\telse:\n\t\tfor i in range(len(crvNumberPrecheck)):\n\t\t\tnum = num + 1\n\t\tprefix = prefix + '_' + str(num)\n\treturn prefix \n\n\n'''\nmain UI window\n\n'''\n\ndef facialControlUI():\n\t#create Window\n\t# ----------------------------------------------------------------------------------\n\tfaceCtrlWindowName = \"faceCtrlWindowUI\"\n\tif (cmds.window(faceCtrlWindowName, exists=True )):\n\t\tcmds.deleteUI( faceCtrlWindowName)\n\tfaceCtrlWindow = cmds.window(faceCtrlWindowName, title=\"Face Controls Creator Menu\", maximizeButton=True, sizeable=True)\n\t\n\t#Nurbs Layout\n\t# ----------------------------------------------------------------------------------\n\tcmds.columnLayout('mainCol')\n\tcmds.tabLayout(\"tabLayoutName01\", p = 'mainCol')\n\tcmds.columnLayout(\"columnLayoutName01\", adjustableColumn = True, p='tabLayoutName01')\n\tcmds.tabLayout(\"tabLayoutName01\", e=True, tl=[('columnLayoutName01','GEN')])\n\tcmds.frameLayout(  \"nurbsLayoutName01\", label = \"Nurbs Surface Editor\", collapsable = True, parent = \"columnLayoutName01\")\n\t\n\tcmds.text(l='', h = 10, p=\"nurbsLayoutName01\")\n\tcmds.textFieldGrp( \"nurbsSurfaceTextField\", l = \"Loaded Nurbs Surface:    \", ed = False, parent = \"nurbsLayoutName01\")\n\tcmds.text(l='', h = 10, p=\"nurbsLayoutName01\")\n\tcmds.intSliderGrp ( \"uvFieldNameU\", label = \"    U Patches:\", field = True, fieldMinValue = 0, fieldMaxValue = 10, minValue = 1, maxValue = 10, columnWidth3 = [80, 50, 50], columnAlign3 = [\"left\", \"both\", \"left\"], value = 1, parent = \"nurbsLayoutName01\")\n\tcmds.intSliderGrp ( \"uvFieldNameV\", label = \"    V Patches:\", field = True, fieldMinValue = 0, fieldMaxValue = 10, minValue = 1, maxValue = 10, columnWidth3 = [80, 50, 50], columnAlign3 = [\"left\", \"both\", \"left\"], value = 1, parent = \"nurbsLayoutName01\")\n\tcmds.separator(h = 20, p=\"nurbsLayoutName01\")\n\t\n\t\n\tcmds.rowLayout( \"nurbsButtonGridLayout\", numberOfColumns=5, columnWidth5=[20, 120, 80, 120, 20], p = \"nurbsLayoutName01\")\n\tcmds.separator( p= \"nurbsButtonGridLayout\", h = 80)\n\tcmds.button(l = 'Load Nurbs Surface', c= loadInTextField, parent = \"nurbsButtonGridLayout\", h = 60)\n\tcmds.separator( p= \"nurbsButtonGridLayout\", h = 80)\n\tcmds.button( l = 'Create Nurbs Surface', c= createNurbsAttachSurface, parent = \"nurbsButtonGridLayout\", h = 60)\n\tcmds.separator( p= \"nurbsButtonGridLayout\", h = 80)\n\tcmds.text(l='', h = 10, p=\"nurbsLayoutName01\")\n\t\n\t#Locator layout\n\t# ----------------------------------------------------------------------------------\n\tcmds.frameLayout (\"locsLayoutName01\", label = \"Locator Objects\", collapsable = True, parent = \"columnLayoutName01\")\n\t\n\tcmds.text(l='', h = 10, p=\"locsLayoutName01\")\n\tcmds.textFieldGrp( \"centerLocTextField\", l = \"Loaded Center Object:     \", ed = False, parent = \"locsLayoutName01\")\n\tcmds.rowLayout( \"centerButtonRowLayout\", numberOfColumns=3, columnWidth3=[130, 120, 120], p = \"locsLayoutName01\")\n\tcmds.text(l='', h = 10, p=\"centerButtonRowLayout\")\n\tcmds.text(l='', h = 10, p=\"centerButtonRowLayout\")\n\tcmds.button( l = 'Load Center Locator', c= \"loadInTextField(True)\", parent = \"centerButtonRowLayout\", h=30, w = 120 )\n\t\n\tcmds.separator( p= \"locsLayoutName01\", h = 10)\n\t\n\t\n\tcmds.textFieldGrp( \"upVecLocTextField\", l = \"Loaded UpVec Object:     \", ed = False, parent = \"locsLayoutName01\")\n\t\n\tcmds.rowLayout( \"upVecButtonRowLayout\", numberOfColumns=3, columnWidth3=[130, 120, 120], p = \"locsLayoutName01\")\n\tcmds.text(l='', h = 10, p=\"upVecButtonRowLayout\")\n\tcmds.text(l='', h = 10, p=\"upVecButtonRowLayout\")\n\tcmds.button(l = 'Load UpVec Locator', c= \"loadInTextField(False)\", parent = \"upVecButtonRowLayout\", h=30, w = 120)\n\t\n\tcmds.separator( p= \"locsLayoutName01\", h = 10)\n\t\n\tcmds.button(l = 'Create UpVec and Center Locator', c= createLocatorsUpCenter, parent = \"locsLayoutName01\")\n\tcmds.text(l='', h = 10, p=\"locsLayoutName01\")\n\t\n\t#extras\n\t# ----------------------------------------------------------------------------------\n\tcmds.frameLayout(\"sizeLayout01\", label = \"Extras\", collapsable = True, parent = \"columnLayoutName01\")\n\tcmds.gridLayout( \"ctrlSizeLayout01\", nr=1, cw = 103, p = 'sizeLayout01')\n\tcmds.text(l='Controller Size:', h = 20, p=\"ctrlSizeLayout01\")\n\tcmds.floatField(\"floatFieldName\", minValue = 0.0, maxValue = 100.0, precision = 2, value = 1.0, parent = \"ctrlSizeLayout01\")\n\t\n\tcmds.intSliderGrp ( \"intFieldName\", label = \"       Joint Limiter:\", field = True, fieldMinValue = 0, fieldMaxValue = 10, minValue = 1, maxValue = 10, columnWidth3 = [100, 50, 50], columnAlign3 = [\"left\", \"both\", \"left\"], value = 1, parent = \"sizeLayout01\")\n\tcmds.text(l='', h = 10, p=\"sizeLayout01\")\n\t\n\t\n\t#main function layout\n\t# ----------------------------------------------------------------------------------\n\tcmds.separator(p='columnLayoutName01')\n\tcmds.text(l='', h = 10, p=\"columnLayoutName01\")\n\tcmds.textFieldGrp( \"prefixTextField\", l = \"Prefix:     \", cw2 = [100, 250], parent = \"columnLayoutName01\")\n\tcmds.text(l='', h = 10, p=\"columnLayoutName01\")\n\tcmds.button(l = 'Clear Fields', c = clearTextField, p = \"columnLayoutName01\")\n\tcmds.button(l = 'Select a Polygon Edge to create controls', c = runControlCreator, p = \"columnLayoutName01\")\n\t\n\t#show Window\n\t# ----------------------------------------------------------------------------------\n\tcmds.showWindow(faceCtrlWindowName)\n\t\n\t# This is a workaround to get MEL global variable value in Python\n\tgMainWindow = mel.eval('$tmpVar=$gMainWindow')\n\tcmds.window( faceCtrlWindowName, edit=True)\n\n\ndef cleanUpControls(ctrls, ctrlJNTgrp):\n\t\n\tcolorNum = 14\n\t\n\tfor i in range(len(ctrls)):\n\t\tcmds.setAttr(ctrls[i]+'.sx', l=True, k=False, cb=False)\n\t\tcmds.setAttr(ctrls[i]+'.sy', l=True, k=False, cb=False)\n\t\tcmds.setAttr(ctrls[i]+'.sz', l=True, k=False, cb=False)\n\t\tcmds.setAttr(ctrls[i]+'.v', l=True, k=False, cb=False)\n\t\tcmds.parentConstraint(ctrls[i], ctrlJNTgrp[i])\n\t\tcmds.setAttr(ctrls[i]+\".overrideEnabled\",1)\n\t\tcmds.setAttr(ctrls[i]+\".overrideColor\",colorNum)\n\ndef createControlJoints(lowRezCurve, prefix):\n\tcmds.select(lowRezCurve + '.cv[0:4]')\n\tctrlTmpJoints = first()\n\tnum = len(ctrlTmpJoints)\n\tctrlJNTs = []\n\t\n\t#rename control joints\n\tfor each in ctrlTmpJoints:\n\t\tcmds.setAttr(each + '.v', 0)\n\t\tctrlJNTs.append(cmds.rename(each, prefix + '_ctrlJNT_' + str(len(ctrlTmpJoints) - num)))\n\t\tnum = num - 1\n\treturn ctrlJNTs\n\ndef createLowRezCurve(prefix, hiRezCurve):\n\ttempCrv = cmds.rebuildCurve(hiRezCurve, ch=1, rpo=0,rt=0,end=1, kr=0,kcp=0,kep=1,kt=0,s=2,d=3,tol=0.01)\n\tcmds.delete(tempCrv, ch=True)\n\tlowRezCurve = cmds.rename(tempCrv[0],prefix + \"_loRez_crv\")\n\treturn lowRezCurve\n\n#possibly redundant\ndef createBindJoints(prefix, tmpJNTs, findYourCenter):\n\tbindJNTs = []\n\tnum = len(tmpJNTs)\n\t#rebuild list for naming\n\tfor each in tmpJNTs:\n\t\ttEmPbLaH = cmds.listRelatives(each, p=True)\n\t\tif findYourCenter:\n\t\t\tcmds.rename(tEmPbLaH, prefix + '_aimJNT_' + str(len(tmpJNTs) - num))\n\t\tbindJNTs.append(cmds.rename(each, prefix + '_bnJNT_' + str(len(tmpJNTs) - num)))\n\t\tnum = num - 1\n\treturn bindJNTs\n\n#redundant??\ndef createPinnedLocs(prefix, locators):\n\tpinnedLocs = []\n\tnum = len(locators)\n\t\n\tfor each in locators:\n\t\tpinnedLocs.append(cmds.rename(each, prefix + '_loc_' + str(len(locators) - num)))\n\t\tnum = num - 1\n\treturn pinnedLocs\n\n'''\nmain function\n\n'''\n\ndef runControlCreator(*args):\n\t\t\n\t#main vars\n\t# ----------------------------------------------------------------------------------\n\thierarchyGrp = []\n\tcreateSliderJoints = False\n\tfindYourCenter = False\n\tcontrolScale = cmds.floatField( \"floatFieldName\", query = True, value = True)\n\tupVecForCenter = cmds.textFieldGrp(\"upVecLocTextField\", query = True, text = True)\n\tcenterLocator = cmds.textFieldGrp(\"centerLocTextField\", query = True, text = True)\n\tnurbSurface = cmds.textFieldGrp(\"nurbsSurfaceTextField\", query = True, text = True)\n\t#checks if vars are empty then sets a booleen var\n\tif upVecForCenter != '' and centerLocator != '':\n\t\tfindYourCenter = True\n\tif nurbSurface != '':\n\t\tcreateSliderJoints = True\n\tlimitHiRexJoints = cmds.intSliderGrp ( \"intFieldName\", query = True, value = True)\n\ttmpJNTs = []\n\t\n\t#edge in selection\n\tedges = cmds.ls(sl=True)\n\t\n\t#convert selection to vertices\n\tvertices = cmds.polyListComponentConversion(edges, fe=True, tv=True)\n\t\n\t#prefix\n\tprefix = objectPrefix()\n\t\n\t#create a curve from edge\n\tcurves = curveFromVertPositions(edges)\n\thiRezCurve = cmds.rename( curves, prefix + \"_hiRez_crv\") #rename var to hiRezCurve\n\thiRezCurveGrp = cmds.group(hiRezCurve, n=hiRezCurve+'_grp')\n\t\n\tcmds.delete(hiRezCurve, ch=True)\n\tcmds.select(hiRezCurve)\n\t#add first and last cvs just incase of step?\n\tcmds.SelectCurveCVsAll()\n\t\n\t#bind joints\n\t# ----------------------------------------------------------------------------------\n\ttmpJNTs = first(center = centerLocator, fromCenter = findYourCenter, step = limitHiRexJoints)\n\tbindJNTs = createBindJoints(prefix, tmpJNTs, findYourCenter)\n\tjntParent = cmds.listRelatives(bindJNTs, p=True)\n\t\n\t#locators \n\t# ----------------------------------------------------------------------------------\n\tlocators = second(upVector = upVecForCenter, fromCenter = findYourCenter, objects = bindJNTs)\n\tpinnedLocs = createPinnedLocs(prefix, locators)\n\t\n\t#pin locators to curve\n\tthird(hiRezCurve, pinnedLocs)\n\t\n\t\n\t#clean up locs into a group\n\tif findYourCenter:\n\t\t#parent under center locator?\n\t\thierarchyGrp.append(cmds.group(jntParent, n=prefix + 'joint_grp'))\n\t\thierarchyGrp.append(cmds.group(pinnedLocs, n=prefix +'locator_grp'))\n\t\tprint('parent not needed')\n\telse:\n\t\tfor i in range(len(bindJNTs)):\n\t\t\t#parentConstraint -mo -skipRotate x -skipRotate y -skipRotate z -weight 1;\n\t\t\tcmds.pointConstraint(pinnedLocs[i], bindJNTs[i])\n\t\thierarchyGrp.append(cmds.group(pinnedLocs, n=prefix + 'locator_grp'))\n\t\thierarchyGrp.append(cmds.group(bindJNTs, n=prefix + 'bindJnts_grp'))\n\t\n\t#low resolution curve\n\tlowRezCurve = createLowRezCurve(prefix, hiRezCurve)\n\tlowRezCurveGrp = cmds.group(lowRezCurve, n=lowRezCurve+'_grp')\n\tcmds.wire( hiRezCurve , w = lowRezCurve, gw= False, en=1.000000, ce=0.000000, li=0.000000, dds=[(0, 100)], n=prefix + '_lowRez_wire')\n\t\n\t\n\t#control joints\n\tctrlJNTs = createControlJoints(lowRezCurve, prefix)\n\t\n\t#skin Control joints to lowRezCurve and clean up to group\n\t# ----------------------------------------------------------------------------------\n\tctrlJNTgrp = groupSpecial(ctrlJNTs)\n\thierarchyGrp.append(cmds.group(ctrlJNTgrp, n=prefix +'_ctrlJNTs_grp'))\n\tcmds.skinCluster(ctrlJNTs, lowRezCurve, dr=4.0, nw=1, mi=1, n = prefix + 'skinClstr')\n\t\n\t#create Controls for CtrlJnts with offset\n\tctrls = faceCtrlCreate(prefix = prefix, objects = ctrlJNTgrp, controlSize = controlScale)\n\tctrlNulls = groupSpecial(ctrls)\n\thierarchyGrp.append(cmds.group(ctrlNulls, n=prefix+'_ctrl_grp'))\n\t\n\t#lock and hide controls, parent to ctrl jnts\n\t# ----------------------------------------------------------------------------------\n\tcleanUpControls(ctrls, ctrlJNTgrp)\n\t\n\t\n\t#group everything to where it will need to be grouped (for scaling and organization)\n\t# ----------------------------------------------------------------------------------\n\tif findYourCenter:\n\t\tcmds.parent(hierarchyGrp[0], hierarchyGrp[2], hierarchyGrp[3], upVecForCenter, centerLocator)\n\t\tnonDeformableGrp = cmds.group(hiRezCurveGrp, lowRezCurveGrp, hierarchyGrp[1], n = prefix + '_nonDeform_grp')\n\t\tcenterPivotScaleGrp = cmds.group(centerLocator, n = prefix + '_scale_grp')\n\telse:\n\t\tscaleGrp = cmds.group(hierarchyGrp[1], hierarchyGrp[2], hierarchyGrp[3], n=prefix+'_scale_grp')\n\t\tnonDeformableGrp = cmds.group(hiRezCurveGrp, lowRezCurveGrp, hierarchyGrp[0], n = prefix + '_nonDeform_grp')\n\t\tfor each in bindJNTs:\n\t\t\tcmds.scaleConstraint(scaleGrp, each)\t\t\n\t\n\tif createSliderJoints:\n\t\tsliderJoints = attachToNurbsSurface(prefix, nurbSurface, bindJNTs)\n\t\tsliderJointsGrp = cmds.group(sliderJoints, n='prefix_sliderJNT_grp')\n\t\tcmds.parent(sliderJointsGrp, nonDeformableGrp )\n\t\n\tif (createSliderJoints == True and findYourCenter == True):\n\t\tfor each in sliderJoints: \n\t\t\tcmds.scaleConstraint(centerLocator, each)\n\t\t\t\n\telif(createSliderJoints == True and findYourCenter == False):\n\t\tfor each in sliderJoints: \n\t\t\tcmds.scaleConstraint(scaleGrp, each)\t\t\n\t#voila it is done",
			"file": "faceCrvJnt.py",
			"file_size": 30486,
			"file_write_time": 131601638010490280,
			"settings":
			{
				"buffer_size": 29776,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n",
			"file": "/C/Users/Doug/Documents/maya/mayaLog",
			"file_size": 55,
			"file_write_time": 131618850730099817,
			"settings":
			{
				"buffer_size": 2,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nSublimeLinter\n-------------\n\n  SublimeLinter 3.10.9\n  ---------------------\n  \n   ____        _     _ _                _     _       _              +--+  +--+\n  / ___| _   _| |__ | (_)_ __ ___   ___| |   (_)_ __ | |_ ___ _ __   |  |  |  |\n  \\___ \\| | | | '_ \\| | | '_ ` _ \\ / _ \\ |   | | '_ \\| __/ _ \\ '__|  |  |  |  |\n   ___) | |_| | |_) | | | | | | | |  __/ |___| | | | | ||  __/ |     |  +--+  |\n  |____/ \\__,_|_.__/|_|_|_| |_| |_|\\___|_____|_|_| |_|\\__\\___|_|     +-----+  |\n                                                                           |  |\n                                                                           +--+\n                           SublimeLinter 4 is imminent!\n  \n  \n  While this is excellent news (4 is soooo much better than 3), here's what you\n  should know:\n  \n  - .sublimelinterrc files will stop working\n  - inline settings (in comments) will stop working\n  - ${project} is now ${folder}\n  - all your settings will be backed up but disabled\n  \n  \n  We ship with better defaults and more linters will work without configuration.\n  However, if you have a complicated setup, upgrading to SublimeLinter 4 will\n  take some effort.\n  \n  To op-out of an automatic upgrade (so you can do it later at your leasure),\n  edit your Package Control settings and add SublimeLinter to the\n  \"auto_upgrade_ignore\" key:\n  \n  \"auto_upgrade_ignore\":\n  [\n    \"SublimeLinter\"\n  ]\n",
			"settings":
			{
				"buffer_size": 1449,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"file": "/C/Users/Doug/Desktop/week03/see.py",
			"settings":
			{
				"buffer_size": 6902,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 137.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"Package Control: instal",
				"Package Control: Install Package"
			]
		],
		"width": 444.0
	},
	"console":
	{
		"height": 130.0,
		"history":
		[
			"import maya.cmds as cmds",
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Doug/Documents/GitHub/pythonScripts"
	],
	"file_history":
	[
		"/C/Users/Doug/Documents/GitHub/pythonScripts/mayaProject.sublime-project",
		"/C/Users/Doug/Documents/GitHub/pythonScripts/LimbBuilder/opController_func.py",
		"/C/Users/Doug/Documents/GitHub/pythonScripts/importerFBX.py",
		"/C/Users/Doug/AppData/Roaming/Sublime Text 3/Packages/User/MayaSublime.sublime-settings",
		"/C/Users/Doug/AppData/Roaming/Sublime Text 3/Packages/MayaSublime/MayaSublime.sublime-settings"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "faceCrvJnt.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29776,
						"regions":
						{
						},
						"selection":
						[
							[
								1477,
								1477
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/Doug/Documents/maya/mayaLog",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1449,
						"regions":
						{
						},
						"selection":
						[
							[
								1449,
								1449
							]
						],
						"settings":
						{
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_width": 2,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/Doug/Desktop/week03/see.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6902,
						"regions":
						{
						},
						"selection":
						[
							[
								877,
								877
							]
						],
						"settings":
						{
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1485.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "mayaProject.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 262.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
